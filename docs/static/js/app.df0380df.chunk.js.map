{"version":3,"sources":["src/reducer/reducer.js","src/reducer/actionTypes.js","src/reducer/actions.js","src/components/News.js","src/components/Feedback.js","src/components/Services.js","src/components/Post.js","App.js","web-build/register-service-worker.js"],"names":["state","action","type","news","payload","refreshing","getNews","dispatch","a","async","fetch","server","then","res","ok","Error","status","json","catch","err","getNewsFromGithub","console","error","News","props","useReducer","reducer","useEffect","actions","setTimeout","length","onPress","v","info","text","title","date","navigation","navigate","screen","headerBackTitle","Platform","OS","ScrollView","View","style","styles","newsContainer","map","i","key","shadow","whiteBackground","TouchableOpacity","newsItem","Text","newsTitle","numberOfLines","Image","source","uri","img","newsImage","newsDate","wrapper","FlatList","data","renderItem","item","keyExtractor","onRefresh","navigationOptions","headerTitle","StyleSheet","create","flex","flexDirection","flexWrap","loader","backgroundColor","color","alignSelf","textAlign","shadowColor","shadowRadius","shadowOffset","width","height","shadowOpacity","elevation","minWidth","maxWidth","justifyContent","alignItems","paddingHorizontal","display","padding","overflow","fontSize","fontWeight","borderRadius","marginTop","marginVertical","marginHorizontal","feedbackWrapper","textInpit","borderColor","borderWidth","textAlignVertical","feedbackButton","paddingTop","Feedback","useState","fio","setFIO","mail","setMAIL","setTEXT","TextInput","placeholder","onChangeText","defaultValue","multiline","Button","log","container","link","Services","openURL","url","Linking","postWrapper","postTitle","postDate","postText","Post","route","params","setOptions","replace","Tab","createBottomTabNavigator","Stack","createStackNavigator","getHeaderTitle","routes","index","name","navTab","Navigator","tabBarOptions","activeTintColor","inactiveTintColor","labelStyle","margin","paddingLeft","Screen","options","tabBarLabel","tabBarIcon","focused","FontAwesome5","size","component","MaterialIcons","App","NavigationContainer","headerStyle","headerTintColor","navigator","window","addEventListener","serviceWorker","register","scope"],"mappings":"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","file":"static/js/app.df0380df.chunk.js","sourcesContent":["import {\r\n    FETCH_NEWS\r\n} from \"./actionTypes\"\r\n\r\nexport default (state = {}, action) => {\r\n\r\n    switch (action.type) {\r\n        case FETCH_NEWS:\r\n            return {\r\n                ...state,\r\n                news: action.payload,\r\n                refreshing: false\r\n            }\r\n        case 'REFRESHING_TRUE':\r\n            return {\r\n                ...state,\r\n                refreshing: true\r\n            }\r\n        case 'REFRESHING_FALSE':\r\n            return {\r\n                ...state,\r\n                refreshing: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n} ","export const FETCH_NEWS = 'FETCH_NEWS'","import {\r\n    FETCH_NEWS\r\n} from './actionTypes'\r\n\r\nimport { server } from '../env'\r\n\r\nexport const getNews = async (dispatch) => {\r\n    await fetch(server + 'api/news')\r\n        .then(async res => {\r\n            if (!res.ok) throw Error(res.status)\r\n            return await res.json()\r\n        })\r\n        .then((res) => {\r\n            dispatch({ type: FETCH_NEWS, payload: res })\r\n            dispatch({type: 'REFRESHING_FALSE'})\r\n        }).catch(err => { getNewsFromGithub(dispatch) })\r\n}\r\n\r\nexport const getNewsFromGithub = async (dispatch) => {\r\n    await fetch('https://raw.githubusercontent.com/LexaPetrov/rn-digital-news/master/backend/fetch.json')\r\n        .then(async res => {\r\n            if (!res.ok) throw Error(res.status)\r\n            return await res.json()\r\n        })\r\n        .then((res) => {\r\n            dispatch({ type: FETCH_NEWS, payload: res })\r\n            dispatch({type: 'REFRESHING_FALSE'})\r\n        }).catch(err => { console.error('getNewsFromGithub ERROR - ', err) })\r\n}\r\n\r\nexport const sendMessage = (data) => {\r\n    //form method POST bla bla bla...\r\n    console.log('sendMessage - ', data);\r\n}","import React, { useEffect, useReducer } from 'react'\r\nimport { View, Text, Image, ScrollView, TouchableOpacity, StyleSheet, Platform, FlatList, SafeAreaView } from 'react-native'\r\nimport reducer from '../reducer/reducer'\r\nimport * as actions from '../reducer/actions'\r\nconst News = props => {\r\n    const initialState = {\r\n        news: [],\r\n        refreshing: true\r\n    }\r\n    const [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n    useEffect(() => {\r\n        actions.getNews(dispatch)\r\n    }, [])\r\n\r\n    setTimeout(() => {\r\n        if (state.news.length === 0) {\r\n            actions.getNewsFromGithub(dispatch)\r\n        }\r\n    }, 5000)\r\n\r\n    const onPress = (v) => {\r\n        let info = {\r\n            text: v.text,\r\n            title: v.title,\r\n            date: v.date\r\n        }\r\n        props.navigation.navigate('Post', { screen: 'Post', info, headerBackTitle: 'Назад' })\r\n    }\r\n\r\n    const handleRefresh = () => {\r\n        dispatch({ type: 'REFRESHING_TRUE' })\r\n        actions.getNews(dispatch)\r\n        dispatch({ type: 'REFRESHING_FALSE' })\r\n    }\r\n\r\n    if (Platform.OS === 'web') {\r\n        return (\r\n            <ScrollView>\r\n                <View style={styles.newsContainer}>\r\n                    {\r\n                        state.news.map((v, i) => {\r\n                            return (\r\n                                <View key={i} style={[styles.shadow, styles.whiteBackground]}>\r\n                                    <TouchableOpacity onPress={() => onPress(v)}>\r\n                                        <View style={[styles.newsItem]}>\r\n                                            <Text style={styles.newsTitle} numberOfLines={1}>\r\n                                                {v.title}\r\n                                            </Text>\r\n                                            <Image\r\n                                                source={{\r\n                                                    // uri: 'https://i.pinimg.com/736x/50/df/34/50df34b9e93f30269853b96b09c37e3b.jpg'\r\n                                                    uri: v.img\r\n                                                }}\r\n                                                style={styles.newsImage}\r\n                                            />\r\n                                            <Text style={styles.newsDate}>\r\n                                                {v.date}\r\n                                            </Text>\r\n                                        </View>\r\n                                    </TouchableOpacity>\r\n                                </View>\r\n\r\n                            )\r\n                        })\r\n                    }\r\n                </View>\r\n            </ScrollView>\r\n        )\r\n    } else {\r\n        return (\r\n            <View style={styles.wrapper}>\r\n                {\r\n                    Platform.OS !== 'web' && state.news && <FlatList\r\n                        data={state.news.length !== 0 ? state.news : null}\r\n                        renderItem={({ item }) => (\r\n                            <View style={styles.newsContainer}>\r\n                                <View style={[styles.shadow, styles.whiteBackground]}>\r\n                                    <TouchableOpacity onPress={() => onPress(item)}>\r\n                                        <View style={[styles.newsItem]}>\r\n                                            <Text style={styles.newsTitle} numberOfLines={1}>\r\n                                                {item.title}\r\n                                            </Text>\r\n                                            <Image\r\n                                                source={{\r\n                                                    // uri: 'https://i.pinimg.com/736x/50/df/34/50df34b9e93f30269853b96b09c37e3b.jpg'\r\n                                                    uri: item.img\r\n                                                }}\r\n                                                style={styles.newsImage}\r\n                                            />\r\n                                            <Text style={styles.newsDate}>\r\n                                                {item.date}\r\n                                            </Text>\r\n                                        </View>\r\n                                    </TouchableOpacity>\r\n                                </View>\r\n                            </View>\r\n                        )}\r\n                        keyExtractor={item => item.date}\r\n                        refreshing={state.refreshing}\r\n                        onRefresh={handleRefresh}\r\n                    />\r\n                }\r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nNews.navigationOptions = {\r\n    headerTitle: 'Новости'\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    wrapper: {\r\n        flex: 1,\r\n        flexDirection: Platform.OS === 'web' ? 'row' : null,\r\n        flexWrap: Platform.OS === 'web' ? 'wrap' : null,\r\n    },\r\n    loader: {\r\n        backgroundColor: 'green',\r\n        color: 'white',\r\n        alignSelf: 'stretch',\r\n        textAlign: 'center'\r\n    },\r\n    shadow: {\r\n        shadowColor: 'black',\r\n        shadowRadius: 3,\r\n        shadowOffset: { width: 0, height: 0 },\r\n        shadowOpacity: .2,\r\n        elevation: 3,\r\n    },\r\n    newsContainer: {\r\n        minWidth: 300,\r\n        maxWidth: Platform.OS === 'web' ? '100%' : null,\r\n        justifyContent: \"center\",\r\n        alignItems: 'center',\r\n        paddingHorizontal: 0,\r\n        display: Platform.OS === 'web' ? 'flex' : null,\r\n        flexDirection: Platform.OS === 'web' ? 'row' : null,\r\n        flexWrap: Platform.OS === 'web' ? 'wrap' : null,\r\n    },\r\n    newsImage: {\r\n        minWidth: Platform.OS === 'web' ? '100%' : '100%',\r\n        height: Platform.OS === 'web' ? 200 : 200,\r\n    },\r\n    newsItem: {\r\n        minWidth: 300,\r\n        padding: 5,\r\n        overflow: \"hidden\"\r\n    },\r\n    newsTitle: {\r\n        maxWidth: Platform.OS === 'web' ? 300 : '100%',\r\n        minWidth: 300,\r\n        fontSize: 16,\r\n        color: '#00185c',\r\n        fontWeight: 'bold',\r\n        // width: Platform.OS === 'web' ? 730 : 320,\r\n    },\r\n    newsDate: {\r\n        fontSize: 12,\r\n        padding: 3,\r\n        backgroundColor: 'black',\r\n        color: 'white',\r\n        borderRadius: 5,\r\n        width: 140,\r\n        marginTop: 2,\r\n        overflow: \"hidden\",\r\n        textAlign: \"center\"\r\n    },\r\n    whiteBackground: {\r\n        backgroundColor: 'white',\r\n        marginVertical: 10,\r\n        marginHorizontal: 10,\r\n    }\r\n})\r\n\r\nexport default News","import React, { useState } from 'react'\r\nimport { View, Text, StyleSheet, TextInput, Button, Platform } from 'react-native'\r\nimport { ScrollView } from 'react-native-gesture-handler'\r\nimport * as actions from '../reducer/actions'\r\n\r\nconst Feedback = props => {\r\n    const [fio, setFIO] = useState('')\r\n    const [mail, setMAIL] = useState('')\r\n    const [text, setTEXT] = useState('')\r\n\r\n    return (\r\n        <ScrollView>\r\n            <View style={styles.feedbackWrapper}>\r\n                <Text style={{ color: \"#a0a0a0\" }}>❗В целях объективного и всестороннего рассмотрения вашего обращения в установленные сроки, необходимо в тексте обращения указывать адрес описанного вами места действия, факта или события, а также можно указать телефон для возможного уточнения содержания вашего обращения.</Text>\r\n                <TextInput style={styles.textInpit}\r\n                    placeholder=\"ФИО\"\r\n                    onChangeText={fio => setFIO(fio)}\r\n                    defaultValue={fio}\r\n                />\r\n                <TextInput style={styles.textInpit}\r\n                    placeholder=\"e-mail\"\r\n                    onChangeText={mail => setMAIL(mail)}\r\n                    defaultValue={mail}\r\n                />\r\n                <TextInput style={[styles.textInpit, { height: 200 }]}\r\n                    placeholder=\"Текст вашего обращения\"\r\n                    multiline\r\n                    onChangeText={text => setTEXT(text)}\r\n                    defaultValue={text}\r\n                />\r\n                <View style={styles.feedbackButton}>\r\n                    <Button title='📫 Отправить' onPress={() => actions.sendMessage([fio, mail, text])} />\r\n                </View>\r\n            </View>\r\n        </ScrollView>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    feedbackWrapper: {\r\n        padding: 10,\r\n        maxWidth: Platform.OS === 'web' ? 700 : null,\r\n        alignSelf: Platform.OS === 'web' ? 'center' : null\r\n    },\r\n    textInpit: {\r\n        marginTop: 10,\r\n        borderColor: '#ccc',\r\n        borderWidth: 2,\r\n        borderRadius: 5,\r\n        height: 50,\r\n        padding: 10,\r\n        textAlignVertical: \"top\",\r\n        fontSize: 20,\r\n\r\n    },\r\n    feedbackButton: {\r\n        paddingTop: 50\r\n    }\r\n})\r\n\r\nexport default Feedback","import React from 'react'\r\nimport { View, StyleSheet, Linking, Button, Platform } from 'react-native'\r\nimport { ScrollView } from 'react-native-gesture-handler'\r\n\r\n\r\nconst Services = props => {\r\n\r\n    const openURL = (url) => {\r\n        Linking.openURL(url)\r\n    }\r\n\r\n    return (\r\n        <ScrollView>\r\n            <View style={styles.container}>\r\n                <View style={styles.link}>\r\n                    <Button  title='🙍‍♂️ Активный гражданин' onPress={() => openURL('https://ag.orb.ru/')} />\r\n                </View>\r\n                <View style={styles.link}>\r\n                    <Button  title='🔐 Удостоверяющий центр' onPress={() => openURL('https://cit.orb.ru/ucit/')} />\r\n                </View>\r\n                <View style={styles.link}>\r\n                    <Button  title='🖥 Услуги в цифровом виде' onPress={() => openURL('https://www.gosuslugi.ru/')} />\r\n                </View>\r\n                <View style={styles.link}>\r\n                    <Button  title='💾 Информационные системы' onPress={() => openURL('http://smev.orb.ru/informacionnye-sistemy/')} />\r\n                </View>\r\n                <View style={styles.link}>\r\n                    <Button  title='📈 Рейтинги ОМСУ' onPress={() => openURL('http://smev.orb.ru/statisticheskaya-informaciya/rating-omsu/')} />\r\n                </View>\r\n                <View style={styles.link}>\r\n                    <Button  title='🔗 МИНЦИФРА' onPress={() => openURL('https://digital.orb.ru/')} />\r\n                </View>\r\n            </View>\r\n        </ScrollView>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        padding: 10,\r\n        maxWidth: Platform.OS === 'web' ? 700 : null,\r\n        alignSelf: Platform.OS === 'web' ? 'center' : null\r\n    },\r\n    link: {\r\n        marginTop: 15\r\n    }\r\n})\r\n\r\nexport default Services","import React from 'react'\r\nimport { ScrollView, Text, View, StyleSheet, Platform } from 'react-native'\r\n\r\n\r\nconst Post = props => {\r\n\r\n    let info = props.route.params.info\r\n\r\n    props.navigation.setOptions({\r\n        headerTitle: info.title\r\n    })\r\n\r\n    const RemoveTabs = (text) => {\r\n        text = text.replace(/\\n+/g, '\\n');\r\n        return text\r\n    }\r\n\r\n\r\n    return (\r\n        <ScrollView>\r\n            <View style={styles.postWrapper}>\r\n                <Text style={styles.postTitle}>{info.title}</Text>\r\n                <Text style={styles.postDate}>{info.date}</Text>\r\n                <Text style={styles.postText}>{RemoveTabs(info.text)}</Text>\r\n            </View>\r\n        </ScrollView>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    postWrapper: {\r\n        padding: 10,\r\n        maxWidth: Platform.OS === 'web' ? 700 : null,\r\n        alignSelf: Platform.OS === 'web' ? 'center' : null\r\n    },\r\n    postTitle: {\r\n        fontWeight: \"bold\",\r\n        fontSize: 18\r\n    },\r\n    postDate: {\r\n        fontSize: 10,\r\n        padding: 3,\r\n        backgroundColor: 'black',\r\n        color: 'white',\r\n        borderRadius: 5,\r\n        width: 140,\r\n        marginTop: 2,\r\n        overflow: \"hidden\",\r\n        textAlign: \"center\"\r\n    },\r\n    postText: {\r\n        fontSize: 14\r\n    }\r\n})\r\n\r\nexport default Post    ","import React from 'react';\nimport News from './src/components/News'\nimport Feedback from './src/components/Feedback'\nimport Services from './src/components/Services'\nimport Post from './src/components/Post'\nimport { Platform } from 'react-native'\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { FontAwesome5, MaterialIcons } from '@expo/vector-icons';\nconst Tab = createBottomTabNavigator();\nconst Stack = createStackNavigator()\n\nconst getHeaderTitle = route => {\n  const routeName = route.state ? route.state.routes[route.state.index].name : '#минцифра56: События'\n  switch (routeName) {\n    case 'News':\n      return '#минцифра56: События 🎈'\n    case 'Feedback':\n      return '#минцифра56: Интернет-приемная 📝'\n    case 'Services':\n      return '#минцифра56:Сервисы 🛠'\n    case '#минцифра56: События':\n      return '#минцифра56: События 🎈'\n  }\n}\n\nfunction navTab({ navigation, route }) {\n  navigation.setOptions({\n    headerTitle: getHeaderTitle(route)\n  })\n\n  return (\n    <Tab.Navigator\n      tabBarOptions={{\n        activeTintColor: '#00185c',\n        inactiveTintColor: 'gray',\n        labelStyle: {\n          fontSize: 12,\n          margin: 0,\n          padding: 0,\n          paddingLeft: Platform.OS === 'web' ? 15 : 0,\n          fontWeight: \"bold\"\n        }\n      }}\n    >\n      <Tab.Screen\n        options={{\n          tabBarLabel: 'События',\n          tabBarIcon: ({ focused }) => (\n            <FontAwesome5 name=\"newspaper\" size={20} color={focused ? '#00185c' : 'gray'} />\n          ),\n        }}\n        name=\"News\"\n        component={News}\n      />\n      <Tab.Screen\n        options={{\n          tabBarLabel: 'Обращение',\n          tabBarIcon: ({ focused }) => (\n            <MaterialIcons name=\"feedback\" size={20} color={focused ? '#00185c' : 'gray'} />\n          )\n        }}\n        name=\"Feedback\"\n        component={Feedback}\n      />\n      <Tab.Screen\n        options={{\n          tabBarLabel: 'Сервисы',\n          tabBarIcon: ({ focused }) => (\n            <FontAwesome5 name=\"external-link-alt\" size={20} color={focused ? '#00185c' : 'gray'} />\n          )\n        }}\n        name=\"Services\"\n        component={Services}\n      />\n    </Tab.Navigator>\n  )\n}\n\nexport default function App() {\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"#минцифра56\" component={navTab}\n          options={\n            ({ route }) => ({\n              title: getHeaderTitle(route)\n            }),\n            {\n              headerStyle: {\n                backgroundColor: Platform.OS === 'android' ? '#00185c' : 'white',\n              },\n              headerTintColor: Platform.OS === 'android' ? 'white' : '#00185c',\n            }\n          }\n        />\n        <Stack.Screen name=\"Post\" component={Post}\n          options={{\n            headerStyle: {\n              backgroundColor: Platform.OS === 'android' ? '#00185c' : 'white'\n            },\n            headerTintColor: Platform.OS === 'android' ? 'white' : '#00185c',\n            headerTitle: 'Post'\n          }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}
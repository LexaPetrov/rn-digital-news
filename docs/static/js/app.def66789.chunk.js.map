{"version":3,"sources":["src/reducer/reducer.js","src/reducer/actionTypes.js","src/reducer/actions.js","src/components/News.js","src/components/Feedback.js","src/components/Services.js","src/components/Post.js","App.js","web-build/register-service-worker.js"],"names":["state","action","type","news","payload","refreshing","getNews","dispatch","a","async","fetch","server","then","res","ok","Error","status","json","catch","err","console","log","getNewsFromGithub","error","News","props","useReducer","reducer","useEffect","actions","renderNewItem","item","TouchableOpacity","onPress","v","info","text","title","date","navigation","navigate","screen","headerBackTitle","View","style","styles","newsItem","Text","newsTitle","numberOfLines","Image","source","uri","img","newsImage","newsDate","Platform","OS","ScrollView","newsContainer","map","i","key","shadow","whiteBackground","wrapper","FlatList","data","length","renderItem","keyExtractor","onRefresh","navigationOptions","headerTitle","StyleSheet","create","flex","flexDirection","flexWrap","loader","backgroundColor","color","alignSelf","textAlign","shadowColor","shadowRadius","shadowOffset","width","height","shadowOpacity","elevation","minWidth","maxWidth","justifyContent","alignItems","paddingHorizontal","display","padding","overflow","fontSize","fontWeight","borderRadius","marginTop","marginVertical","marginHorizontal","feedbackWrapper","textInpit","borderColor","borderWidth","textAlignVertical","feedbackButton","paddingTop","Feedback","useState","fio","setFIO","mail","setMAIL","setTEXT","TextInput","placeholder","onChangeText","defaultValue","multiline","Button","container","link","Services","openURL","url","Linking","postWrapper","postTitle","postDate","postText","Post","route","params","setOptions","replace","Tab","createBottomTabNavigator","Stack","createStackNavigator","getHeaderTitle","routes","index","name","navTab","Navigator","tabBarOptions","activeTintColor","inactiveTintColor","labelStyle","margin","paddingLeft","labelPosition","Screen","options","tabBarLabel","tabBarIcon","focused","FontAwesome5","size","component","MaterialIcons","App","NavigationContainer","StatusBar","barStyle","headerStyle","headerTintColor","headerTruncatedBackTitle","navigator","window","addEventListener","serviceWorker","register","scope"],"mappings":"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","file":"static/js/app.def66789.chunk.js","sourcesContent":["import {\r\n    FETCH_NEWS\r\n} from \"./actionTypes\"\r\n\r\nexport default (state = {}, action) => {\r\n\r\n    switch (action.type) {\r\n        case FETCH_NEWS:\r\n            return {\r\n                ...state,\r\n                news: action.payload,\r\n                refreshing: false\r\n            }\r\n        case 'REFRESHING_TRUE':\r\n            return {\r\n                ...state,\r\n                refreshing: true\r\n            }\r\n        case 'REFRESHING_FALSE':\r\n            return {\r\n                ...state,\r\n                refreshing: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n} ","export const FETCH_NEWS = 'FETCH_NEWS'","import {\r\n    FETCH_NEWS\r\n} from './actionTypes'\r\n\r\nimport { server } from '../env'\r\n\r\nexport const getNews = async (dispatch) => {\r\n    await fetch(server + 'api/news')\r\n        .then(async res => {\r\n            if (!res.ok) throw Error(res.status)\r\n            return await res.json()\r\n        })\r\n        .then((res) => {\r\n            dispatch({ type: FETCH_NEWS, payload: res })\r\n            dispatch({type: 'REFRESHING_FALSE'})\r\n        }).catch(err => {console.log('getNews err - ', err); dispatch({type: 'REFRESHING_TRUE'}); getNewsFromGithub(dispatch);  })\r\n}\r\n\r\nexport const getNewsFromGithub = async (dispatch) => {\r\n    console.log('fetching from github...');\r\n    await fetch('https://raw.githubusercontent.com/LexaPetrov/rn-digital-news/master/backend/fetch.json')\r\n        .then(async res => {\r\n            if (!res.ok) throw Error(res.status)\r\n            return await res.json()\r\n        })\r\n        .then((res) => {\r\n            dispatch({ type: FETCH_NEWS, payload: res })\r\n            dispatch({type: 'REFRESHING_FALSE'})\r\n        }).catch(err => { console.error('getNewsFromGithub ERROR - ', err) })\r\n}\r\n\r\nexport const sendMessage = (data) => {\r\n    //form method POST bla bla bla...\r\n    console.log('sendMessage - ', data);\r\n}","import React, { useEffect, useReducer } from 'react'\r\nimport { View, Text, Image, ScrollView, TouchableOpacity, StyleSheet, Platform, FlatList } from 'react-native'\r\nimport reducer from '../reducer/reducer'\r\nimport * as actions from '../reducer/actions'\r\nconst News = props => {\r\n    const initialState = {\r\n        news: [],\r\n        refreshing: true\r\n    }\r\n    const [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n    useEffect(() => {\r\n        actions.getNews(dispatch)\r\n    }, [])\r\n\r\n    const onPress = (v) => {\r\n        let info = {\r\n            text: v.text,\r\n            title: v.title,\r\n            date: v.date\r\n        }\r\n        props.navigation.navigate('Post', { screen: 'Post', info, headerBackTitle: 'Назад' })\r\n    }\r\n\r\n    const handleRefresh = () => {\r\n        dispatch({ type: 'REFRESHING_TRUE' })\r\n        actions.getNews(dispatch)\r\n        dispatch({ type: 'REFRESHING_FALSE' })\r\n    }\r\n\r\n    const renderNewItem = (item) => {\r\n        return (\r\n            <TouchableOpacity onPress={() => onPress(item)}>\r\n                <View style={[styles.newsItem]}>\r\n                    <Text style={styles.newsTitle} numberOfLines={1}>\r\n                        {item.title}\r\n                    </Text>\r\n                    <Image\r\n                        source={{\r\n                            // uri: 'https://i.pinimg.com/736x/50/df/34/50df34b9e93f30269853b96b09c37e3b.jpg'\r\n                            uri: item.img\r\n                        }}\r\n                        style={styles.newsImage}\r\n                    />\r\n                    <Text style={styles.newsDate}>\r\n                        {item.date}\r\n                    </Text>\r\n                </View>\r\n            </TouchableOpacity>\r\n        )\r\n    }\r\n\r\n    if (Platform.OS === 'web') {\r\n        return (\r\n            <ScrollView>\r\n                <View style={styles.newsContainer}>\r\n                    {\r\n                        state.news.map((v, i) => {\r\n                            return (\r\n                                <View key={i} style={[styles.shadow, styles.whiteBackground]}>\r\n                                    {renderNewItem(v)}\r\n                                </View>\r\n\r\n                            )\r\n                        })\r\n                    }\r\n                </View>\r\n            </ScrollView>\r\n        )\r\n    } else {\r\n        return (\r\n            <View style={styles.wrapper}>\r\n                {\r\n                    Platform.OS !== 'web' && state.news && <FlatList\r\n                        data={state.news.length !== 0 ? state.news : null}\r\n                        renderItem={({ item }) => (\r\n                            <View style={styles.newsContainer}>\r\n                                <View style={[styles.shadow, styles.whiteBackground]}>\r\n                                    {renderNewItem(item)}\r\n                                </View>\r\n                            </View>\r\n                        )}\r\n                        keyExtractor={item => item.date}\r\n                        refreshing={state.refreshing}\r\n                        onRefresh={handleRefresh}\r\n                    />\r\n                }\r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nNews.navigationOptions = {\r\n    headerTitle: 'Новости'\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    wrapper: {\r\n        flex: 1,\r\n        flexDirection: Platform.OS === 'web' ? 'row' : null,\r\n        flexWrap: Platform.OS === 'web' ? 'wrap' : null,\r\n    },\r\n    loader: {\r\n        backgroundColor: 'green',\r\n        color: 'white',\r\n        alignSelf: 'stretch',\r\n        textAlign: 'center'\r\n    },\r\n    shadow: {\r\n        shadowColor: 'black',\r\n        shadowRadius: 3,\r\n        shadowOffset: { width: 0, height: 0 },\r\n        shadowOpacity: .2,\r\n        elevation: 3,\r\n    },\r\n    newsContainer: {\r\n        minWidth: 300,\r\n        maxWidth: Platform.OS === 'web' ? '100%' : null,\r\n        justifyContent: \"center\",\r\n        alignItems: 'center',\r\n        paddingHorizontal: 0,\r\n        display: Platform.OS === 'web' ? 'flex' : null,\r\n        flexDirection: Platform.OS === 'web' ? 'row' : null,\r\n        flexWrap: Platform.OS === 'web' ? 'wrap' : null,\r\n    },\r\n    newsImage: {\r\n        minWidth: Platform.OS === 'web' ? '100%' : '100%',\r\n        height: Platform.OS === 'web' ? 200 : 200,\r\n    },\r\n    newsItem: {\r\n        minWidth: 300,\r\n        padding: 5,\r\n        overflow: \"hidden\"\r\n    },\r\n    newsTitle: {\r\n        maxWidth: Platform.OS === 'web' ? 300 : '100%',\r\n        minWidth: 300,\r\n        fontSize: 16,\r\n        color: '#00185c',\r\n        fontWeight: 'bold',\r\n        // width: Platform.OS === 'web' ? 730 : 320,\r\n    },\r\n    newsDate: {\r\n        fontSize: 12,\r\n        padding: 3,\r\n        backgroundColor: 'black',\r\n        color: 'white',\r\n        borderRadius: 5,\r\n        width: 150,\r\n        marginTop: 2,\r\n        overflow: \"hidden\",\r\n        textAlign: \"center\"\r\n    },\r\n    whiteBackground: {\r\n        backgroundColor: 'white',\r\n        marginVertical: 10,\r\n        marginHorizontal: 10,\r\n    }\r\n})\r\n\r\nexport default News","import React, { useState } from 'react'\r\nimport { View, Text, StyleSheet, TextInput, Button, Platform } from 'react-native'\r\nimport { ScrollView } from 'react-native-gesture-handler'\r\nimport * as actions from '../reducer/actions'\r\n\r\nconst Feedback = props => {\r\n    const [fio, setFIO] = useState('')\r\n    const [mail, setMAIL] = useState('')\r\n    const [text, setTEXT] = useState('')\r\n\r\n    return (\r\n        <ScrollView>\r\n            <View style={styles.feedbackWrapper}>\r\n                <Text style={{ color: \"#a0a0a0\" }}>❗В целях объективного и всестороннего рассмотрения вашего обращения в установленные сроки, необходимо в тексте обращения указывать адрес описанного вами места действия, факта или события, а также можно указать телефон для возможного уточнения содержания вашего обращения.</Text>\r\n                <TextInput style={styles.textInpit}\r\n                    placeholder=\"ФИО\"\r\n                    onChangeText={fio => setFIO(fio)}\r\n                    defaultValue={fio}\r\n                />\r\n                <TextInput style={styles.textInpit}\r\n                    placeholder=\"e-mail\"\r\n                    onChangeText={mail => setMAIL(mail)}\r\n                    defaultValue={mail}\r\n                />\r\n                <TextInput style={[styles.textInpit, { height: 200 }]}\r\n                    placeholder=\"Текст вашего обращения\"\r\n                    multiline\r\n                    onChangeText={text => setTEXT(text)}\r\n                    defaultValue={text}\r\n                />\r\n                <View style={styles.feedbackButton}>\r\n                    <Button title='📫 Отправить' onPress={() => actions.sendMessage([fio, mail, text])} />\r\n                </View>\r\n            </View>\r\n        </ScrollView>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    feedbackWrapper: {\r\n        padding: 10,\r\n        maxWidth: Platform.OS === 'web' ? 700 : null,\r\n        alignSelf: Platform.OS === 'web' ? 'center' : null\r\n    },\r\n    textInpit: {\r\n        marginTop: 10,\r\n        borderColor: '#ccc',\r\n        borderWidth: 2,\r\n        borderRadius: 5,\r\n        height: 50,\r\n        padding: 10,\r\n        textAlignVertical: \"top\",\r\n        fontSize: 20,\r\n\r\n    },\r\n    feedbackButton: {\r\n        paddingTop: 50\r\n    }\r\n})\r\n\r\nexport default Feedback","import React from 'react'\r\nimport { View, StyleSheet, Linking, Button, Platform } from 'react-native'\r\nimport { ScrollView } from 'react-native-gesture-handler'\r\n\r\n\r\nconst Services = props => {\r\n\r\n    const openURL = (url) => {\r\n        Linking.openURL(url)\r\n    }\r\n\r\n    return (\r\n        <ScrollView>\r\n            <View style={styles.container}>\r\n                <View style={styles.link}>\r\n                    <Button  title='🙍‍♂️ Активный гражданин' onPress={() => openURL('https://ag.orb.ru/')} />\r\n                </View>\r\n                <View style={styles.link}>\r\n                    <Button  title='🔐 Удостоверяющий центр' onPress={() => openURL('https://cit.orb.ru/ucit/')} />\r\n                </View>\r\n                <View style={styles.link}>\r\n                    <Button  title='🖥 Услуги в цифровом виде' onPress={() => openURL('https://www.gosuslugi.ru/')} />\r\n                </View>\r\n                <View style={styles.link}>\r\n                    <Button  title='💾 Информационные системы' onPress={() => openURL('http://smev.orb.ru/informacionnye-sistemy/')} />\r\n                </View>\r\n                <View style={styles.link}>\r\n                    <Button  title='📈 Рейтинги ОМСУ' onPress={() => openURL('http://smev.orb.ru/statisticheskaya-informaciya/rating-omsu/')} />\r\n                </View>\r\n                <View style={styles.link}>\r\n                    <Button  title='🔗 МИНЦИФРА' onPress={() => openURL('https://digital.orb.ru/')} />\r\n                </View>\r\n            </View>\r\n        </ScrollView>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        padding: 10,\r\n        maxWidth: Platform.OS === 'web' ? 700 : null,\r\n        alignSelf: Platform.OS === 'web' ? 'center' : null\r\n    },\r\n    link: {\r\n        marginTop: 15\r\n    }\r\n})\r\n\r\nexport default Services","import React from 'react'\r\nimport { ScrollView, Text, View, StyleSheet, Platform } from 'react-native'\r\n\r\n\r\nconst Post = props => {\r\n\r\n    let info = props.route.params.info\r\n\r\n    props.navigation.setOptions({\r\n        headerTitle: info.title\r\n    })\r\n\r\n    const RemoveTabs = (text) => {\r\n        text = text.replace(/\\n+/g, '\\n');\r\n        return text\r\n    }\r\n\r\n\r\n    return (\r\n        <ScrollView>\r\n            \r\n            <View style={styles.postWrapper}>\r\n                <Text style={styles.postTitle}>{info.title}</Text>\r\n                <Text style={styles.postDate}>{info.date}</Text>\r\n                <Text style={styles.postText}>{RemoveTabs(info.text)}</Text>\r\n            </View>\r\n        </ScrollView>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    postWrapper: {\r\n        padding: 10,\r\n        maxWidth: Platform.OS === 'web' ? 700 : null,\r\n        alignSelf: Platform.OS === 'web' ? 'center' : null\r\n    },\r\n    postTitle: {\r\n        fontWeight: \"bold\",\r\n        fontSize: 18\r\n    },\r\n    postDate: {\r\n        fontSize: 10,\r\n        padding: 3,\r\n        backgroundColor: 'black',\r\n        color: 'white',\r\n        borderRadius: 5,\r\n        width: 140,\r\n        marginTop: 2,\r\n        overflow: \"hidden\",\r\n        textAlign: \"center\"\r\n    },\r\n    postText: {\r\n        fontSize: 14\r\n    }\r\n})\r\n\r\nexport default Post    ","import React from 'react';\nimport News from './src/components/News'\nimport Feedback from './src/components/Feedback'\nimport Services from './src/components/Services'\nimport Post from './src/components/Post'\nimport { Platform, StatusBar } from 'react-native'\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { FontAwesome5, MaterialIcons } from '@expo/vector-icons';\nconst Tab = createBottomTabNavigator();\nconst Stack = createStackNavigator()\n\nconst getHeaderTitle = route => {\n  const routeName = route.state ? route.state.routes[route.state.index].name : '#минцифра56: События'\n  switch (routeName) {\n    case 'News':\n      return '#минцифра56: События 🎈'\n    case 'Feedback':\n      return '#минцифра56: Интернет-приемная 📝'\n    case 'Services':\n      return '#минцифра56:Сервисы 🛠'\n    case '#минцифра56: События':\n      return '#минцифра56: События 🎈'\n  }\n}\n\nfunction navTab({ navigation, route }) {\n  navigation.setOptions({\n    headerTitle: getHeaderTitle(route)\n  })\n\n  return (\n    <Tab.Navigator\n      tabBarOptions={{\n        activeTintColor: '#00185c',\n        inactiveTintColor: 'gray',\n        labelStyle: {\n          fontSize: 12,\n          margin: 0,\n          padding: 0,\n          paddingLeft:  0,\n          // fontWeight: \"bold\",\n        },\n        labelPosition: 'below-icon'\n      }}\n    >\n      <Tab.Screen\n        options={{\n          tabBarLabel: 'События',\n          tabBarIcon: ({ focused }) => (\n            <FontAwesome5 name=\"newspaper\" size={20} color={focused ? '#00185c' : 'gray'} />\n          ),\n        }}\n        name=\"News\"\n        component={News}\n      />\n      <Tab.Screen\n        options={{\n          tabBarLabel: 'Обращение',\n          tabBarIcon: ({ focused }) => (\n            <MaterialIcons name=\"feedback\" size={20} color={focused ? '#00185c' : 'gray'} />\n          )\n        }}\n        name=\"Feedback\"\n        component={Feedback}\n      />\n      <Tab.Screen\n        options={{\n          tabBarLabel: 'Сервисы',\n          tabBarIcon: ({ focused }) => (\n            <FontAwesome5 name=\"external-link-alt\" size={20} color={focused ? '#00185c' : 'gray'} />\n          )\n        }}\n        name=\"Services\"\n        component={Services}\n      />\n    </Tab.Navigator>\n  )\n}\n\nexport default function App() {\n\n  return (\n    <NavigationContainer>\n      <StatusBar barStyle={Platform.OS === 'ios' ? 'dark-content' : 'light-content'} backgroundColor={Platform.OS === 'android' ? '#00185c' : 'white'}/>\n      <Stack.Navigator>\n        <Stack.Screen name=\"#минцифра56\" component={navTab}\n          options={\n            ({ route }) => ({\n              title: getHeaderTitle(route)\n            }),\n            {\n              headerStyle: {\n                backgroundColor: Platform.OS === 'android' ? '#00185c' : 'white',\n              },\n              headerTintColor: Platform.OS === 'android' ? 'white' : '#00185c',\n              headerTruncatedBackTitle: false\n            }\n          }\n        />\n        <Stack.Screen name=\"Post\" component={Post}\n          options={{\n            headerStyle: {\n              backgroundColor: Platform.OS === 'android' ? '#00185c' : 'white'\n            },\n            headerTintColor: Platform.OS === 'android' ? 'white' : '#00185c',\n            headerTitle: 'Post',\n            headerTruncatedBackTitle: false\n          }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}